<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Camera Preview</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            overflow: hidden;
            background: black;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        video, canvas {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        .fullscreen-button {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            padding: 10px 20px;
            background: rgba(255, 255, 255, 0.8);
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: opacity 0.5s;
        }
    </style>
</head>
<body>

    <canvas id="canvas"></canvas>
    <button class="fullscreen-button" id="fullscreen-btn">Enter Fullscreen</button>

    <script>
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        const fullscreenBtn = document.getElementById('fullscreen-btn');

        let videoStream;

        // Request camera access
        async function initCamera() {
            try {
                videoStream = await navigator.mediaDevices.getUserMedia({
                    video: { facingMode: { exact: "environment" } }
                });
                const video = document.createElement('video');
                video.srcObject = videoStream;
                video.play();

                video.addEventListener('loadedmetadata', () => {
                    canvas.width = video.videoWidth;
                    canvas.height = video.videoHeight;
                    draw(video);
                });
            } catch (error) {
                alert('Error accessing camera: ' + error);
            }
        }

        // Invert video colors and draw to canvas
        function draw(video) {
            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const data = imageData.data;

            for (let i = 0; i < data.length; i += 4) {
                data[i] = 255 - data[i];       // Red
                data[i + 1] = 255 - data[i + 1]; // Green
                data[i + 2] = 255 - data[i + 2]; // Blue
            }

            ctx.putImageData(imageData, 0, 0);
            requestAnimationFrame(() => draw(video));
        }

        // Fullscreen functionality
        fullscreenBtn.addEventListener('click', toggleFullscreen);

        function toggleFullscreen() {
            if (!document.fullscreenElement) {
                document.documentElement.requestFullscreen();
                fullscreenBtn.innerText = 'Exit Fullscreen';
            } else {
                document.exitFullscreen();
                fullscreenBtn.innerText = 'Enter Fullscreen';
            }
        }

        // Fade out the button after being idle
        let idleTimer;
        function resetIdleTimer() {
            fullscreenBtn.style.opacity = 1;
            clearTimeout(idleTimer);
            idleTimer = setTimeout(() => {
                fullscreenBtn.style.opacity = 0;
            }, 3000);
        }

        document.addEventListener('mousemove', resetIdleTimer);
        document.addEventListener('touchstart', resetIdleTimer);

        // Initialize the camera on load
        initCamera();

        // Start idle timer
        resetIdleTimer();
    </script>

</body>
</html>
